FROMIMG="lrgc01/debian-net:${ARCH}"
COMMENT="Node.js and npm over openssh-server image"
IMGNAME="nodejs"

START_DIR=${START_DIR:-"/start.d"}
STARTFILE=${START_CMD:-"start.sh"}

UID_=${JENKINS_UID:-102}
GID_=${JENKINS_GID:-103}
USR_=${JENKINS_USR:-pyuser}
GRP_=${JENKINS_GRP:-pygrp}
USERDIR_=${JENKINS_HOMEDIR:-var/lib/jenkins}
USERDIR_=${USERDIR_#/}

IPFILE=${NODE_IPFILE:-"nodejs.host"}

# Get Original Dockerfile as Dockerfile.inc
wget --quiet -O Dockerfile.inc 'https://raw.githubusercontent.com/nodejs/docker-node/refs/heads/main/22/bookworm-slim/Dockerfile'

# 
# ---- Start command ----
#    ... with workaround to get IP 
#
OLD_IFS="$IFS"
IFS=""

_STARTBODY="#!/bin/bash

# Some environment variables that may be passed to the container
# Any file/script can be uploaded inside a volume using the Docker Host
START_SH=\${DOCKER_START_SH}
WORKDIR=\${DOCKER_WORKDIR:-\"/startup.d\"}

# Start of the container main purpose app
if [ -d \"\$WORKDIR\" ]; then
   cd \"\$WORKDIR\"
fi

# If there is a application script, run it, otherwise run sshd below
if [ -f \"\$START_SH\" ]; then
   bash \"\$START_SH\"
else
   if [ -d \"/$USERDIR_\" ];  then
      # workaround to get my ip
      grep -w \$(hostname) /etc/hosts | awk '{print \$1}' > \"/$USERDIR_/$IPFILE\"
   fi
   # -D to run the daemon in foreground
   /usr/sbin/sshd -D
fi
"
#
# ---- end workaround IP ----

#
# Dockerfile
#
_DOCKERBODY="#
# This is a Dockerfile made from create.sh script - don't change here
#
FROM $FROMIMG

LABEL Comment=\"$COMMENT\"

RUN groupadd --gid 1001 node && \\
    useradd --uid 1001 --gid node --shell /bin/bash --create-home node && \\
    groupadd --gid $GID_ $GRP_ && \\
    useradd -M --uid $UID_ --gid $GRP_ --shell /bin/bash -d /$USERDIR_ $USR_ && \\
    apt-get update && apt-get install -y xz-utils gpg curl && \\
    apt-get clean && \\
    rm -f /var/cache/apt/pkgcache.bin /var/cache/apt/srcpkgcache.bin && \\
    rm -fr /var/lib/apt/lists/* && \\
    rm -fr /usr/share/man/man* && \\
    mkdir -p $START_DIR

COPY $STARTFILE $START_DIR/
"

IFS="$OLD_IFS"

(echo "$_DOCKERBODY" ; tail -n +5 Dockerfile.inc) | sed -e "s|CMD.*|CMD [\"sh\",\"$START_DIR/$STARTFILE\"]|" | grep -v 'purge.*auto-remove' > $DOCKERFILE
unset _DOCKERBODY
#
# ---- end Dockerfile ----
#

