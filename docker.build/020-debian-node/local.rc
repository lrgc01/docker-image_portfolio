FROMIMG="lrgc01/debian-git:${ARCH}"
COMMENT="Node.js and npm over openssh-server image"
IMGNAME="nodejs"

START_DIR=${START_DIR:-"/start.d"}
STARTFILE=${START_CMD:-"start.sh"}

UID_=${ADMIN_UID:-1000}
GID_=${ADMIN_GID:-1000}
USR_=${ADMIN_USR:-admin}
GRP_=${ADMIN_GRP:-admin}
USERDIR_=${HOMEDIR:-home/admin}
# Strip out first slash
USERDIR_=${USERDIR_#/}
KEY_FILE=${KEY_FILE:-"id_docker"}
BASEPATH=${BASEPATH:-"/usr/local/bin:/usr/local/sbin:/opt/maven/bin:/usr/bin:/usr/sbin:/bin:/sbin"}
LOCALBIN=${LOCALBIN:-"usr/local/bin"}

IPFILE=${NODE_IPFILE:-"nodejs.host"}

# Get Original Dockerfile as Dockerfile.inc
wget --quiet -O Dockerfile.inc 'https://raw.githubusercontent.com/nodejs/docker-node/refs/heads/main/22/bookworm-slim/Dockerfile'

# Temporary tarball to ADD into the container
TAR_BALL=temp_tarball.tgz

TOCLEAN="$TAR_BALL home"

## Pre build of some directory trees
##
## ---- SSH configuration ----
##
#if [ ! -d "$USERDIR_"/.ssh ]; then
#   mkdir -p "$USERDIR_"/.ssh
#fi
#if [ ! -f "$USERDIR_/.ssh/$KEY_FILE" ]; then
#   ssh-keygen -f "$USERDIR_/.ssh/$KEY_FILE" -N ''
#fi
#cp "$USERDIR_/.ssh/$KEY_FILE".pub "$USERDIR_"/.ssh/authorized_keys
## ssh config to use widely
#cat > "$USERDIR_"/.ssh/config << EOF
#Host *
#IdentityFile ~/.ssh/$KEY_FILE
#User $USR_
#StrictHostKeyChecking no
#EOF
##
## ---- end SSH ----
#
## 
## ---- other user configs ----
#echo export PATH=$BASEPATH > "$USERDIR_"/.profile
#echo export PATH=$BASEPATH > "$USERDIR_"/.bashrc
## ---- end configs ----
#
## 
## ---- Python wrapper built in bash ----
##
## This will be used by jenkins to find out the python host
#PYHOST_FILE=${PYHOST_FILE:-"python.host"}
#PYWRAP_FILE=${PYWRAP_FILE:-"python_wrap.sh"}
## python commands to be linked to $PYWRAP_FILE
#PYFILES="python python3 pytest py.test pyinstaller"
#
#if [ ! -d $LOCALBIN ]; then
#   mkdir -p $LOCALBIN
#fi
#cat > $LOCALBIN/$PYWRAP_FILE << EOF
##!/bin/sh
#
#if [ -f ~/$PYHOST_FILE ]; then
#   PYHOST=\$(head -1 ~/$PYHOST_FILE)
#else
#   PYHOST=python
#fi
#
#CWD="\`pwd\`"		# Should run in the same directory
#COMMAND=\`basename \$0\`	# Just want the command name itself
#
#if [ "\$COMMAND" = "python" ] ; then
#   # If need python2, remove this IF but install python2 in the python container
#   ssh -o StrictHostKeyChecking=no \$PYHOST "(cd \"\$CWD\" ; python3 "\$@" )"
#else
#   ssh -o StrictHostKeyChecking=no \$PYHOST "(cd \"\$CWD\" ; \$COMMAND "\$@" )"
#fi
#
#EOF
#
## Don't forget to make it executable
#chmod 755 $LOCALBIN/$PYWRAP_FILE
#
#( cd $LOCALBIN 
#for pyfile in $PYFILES
#do
#   ln -sf $PYWRAP_FILE $pyfile
#done )
##
## ---- end python wrap ----
#
## 
## ---- PHP wrapper commands in bash ----
##
## This will be used by jenkins to find out the PHP host
#PHP_HOST_FILE=${PHP_HOST_FILE:-"php.host"}
#PHP_WRAP_FILE=${PHP_WRAP_FILE:-"php_wrap.sh"}
## PHP commands to be linked to $PHP_WRAP_FILE
#PHP_FILES="php phpdismod phpenmod phpquery "
#
#if [ ! -d $LOCALBIN ]; then
#   mkdir -p $LOCALBIN
#fi
#cat > $LOCALBIN/$PHP_WRAP_FILE << EOF
##!/bin/sh
#
#if [ -f ~/$PHP_HOST_FILE ]; then
#   PHP_HOST=\$(head -1 ~/$PHP_HOST_FILE)
#else
#   PHP_HOST=php
#fi
#
#CWD="\`pwd\`"		# Should run in the same directory
#COMMAND=\`basename \$0\`	# Just want the command name itself
#
#ssh -o StrictHostKeyChecking=no \$PHP_HOST "(cd \"\$CWD\" ; \$COMMAND "\$@" )"
#
#EOF
#
## Don't forget to make it executable
#chmod 755 $LOCALBIN/$PHP_WRAP_FILE
#
#( cd $LOCALBIN 
#for phpfile in $PHP_FILES
#do
#   ln -sf $PHP_WRAP_FILE $phpfile
#done )
##
## ---- end PHP wrap ----
#
## Before packing, ensure proper settings to ensure ssh running
#$SUDO chown -R $UID_:$GID_ "$USERDIR_"
#$SUDO chmod -R go-rwx "$USERDIR_"
#$SUDO chown $UID_:$GID_ "$USERDIR_"/.profile
#$SUDO chown $UID_:$GID_ "$USERDIR_"/.bashrc
## Make tar ball that will contain usr and var trees
#[ -d usr ] && DIRLIST="$DIRLIST usr"
#[ -d etc ] && DIRLIST="$DIRLIST etc"
#[ -d var ] && DIRLIST="$DIRLIST var"
#[ -d home ] && DIRLIST="$DIRLIST home"
## may add USERDIR_ when it is not inside var
##[ -d $USERDIR_ ] && DIRLIST="$DIRLIST $USERDIR_"
#$SUDO tar -czf ${TAR_BALL} $DIRLIST
#
# 
# ---- Start command ----
#    ... with workaround to get IP 
#
OLD_IFS="$IFS"
IFS=""

_STARTBODY="#!/bin/bash

# Some environment variables that may be passed to the container
# Any file/script can be uploaded inside a volume using the Docker Host
START_SH=\${DOCKER_START_SH}
WORKDIR=\${DOCKER_WORKDIR:-\"/startup.d\"}

# Start of the container main purpose app
if [ -d \"\$WORKDIR\" ]; then
   cd \"\$WORKDIR\"
fi

# If there is a application script, run it, otherwise run sshd below
if [ -f \"\$START_SH\" ]; then
   bash \"\$START_SH\"
else
   if [ -d \"/$USERDIR_\" ];  then
      # workaround to get my ip
      grep -w \$(hostname) /etc/hosts | awk '{print \$1}' > \"/$USERDIR_/$IPFILE\"
   fi
   # -D to run the daemon in foreground
   /usr/sbin/sshd -D
fi
"
#
# ---- end workaround IP ----

#
# Dockerfile
#
_DOCKERBODY="#
# This is a Dockerfile made from create.sh script - don't change here
#
FROM $FROMIMG

LABEL Comment=\"$COMMENT\"

#ADD $TAR_BALL /

RUN groupadd --gid 1001 node && \\
    useradd --uid 1001 --gid node --shell /bin/bash --create-home node && \\
    [ ! \$(id -g $GRP_ > /dev/null) ] && echo group $GRP_ exists || groupadd --gid $GID_ $GRP_ && \\
    [ ! \$(id $USR_ > /dev/null) ] && echo user $USR_ exists || \\
    useradd -M --uid $UID_ --gid $GRP_ --shell /bin/bash -d /$USERDIR_ $USR_ && \\
    apt-get update && apt-get install -y xz-utils gpg curl && \\
    apt-get clean && \\
    rm -f /var/cache/apt/pkgcache.bin /var/cache/apt/srcpkgcache.bin && \\
    rm -fr /var/lib/apt/lists/* && \\
    rm -fr /usr/share/man/man* && \\
    mkdir -p $START_DIR

COPY $STARTFILE $START_DIR/
"

IFS="$OLD_IFS"

(echo "$_DOCKERBODY" ; tail -n +5 Dockerfile.inc) | sed -e "s|CMD.*|CMD [\"sh\",\"$START_DIR/$STARTFILE\"]|" | grep -v 'purge.*auto-remove' > $DOCKERFILE
unset _DOCKERBODY
#
# ---- end Dockerfile ----
#

