COMMENT="Jenkins over base + jdk environment"

FROMIMG="lrgc01/openjdk:${ARCH}"

if [ `whoami` != "root" ]; then
        SUDO="sudo"
fi

# These are expected to be sourced from generic.rc
UID_=${JENKINS_UID:-102}
GID_=${JENKINS_GID:-103}
USR_=${JENKINS_USR:-pyuser}
GRP_=${JENKINS_GRP:-pygrp}
USERDIR_=${JENKINS_HOMEDIR:-var/lib/jenkins}
# Strip out first slash
USERDIR_=${USERDIR_#/}
KEY_FILE=${JENKINS_KEY_FILE:-"Jenkins_System_Key"}
BASEPATH=${BASEPATH:-"/usr/local/bin:/usr/local/sbin:/opt/maven/bin:/usr/bin:/usr/sbin:/bin:/sbin"}
LOCALBIN=${JENKINS_LOCALBIN:-"usr/local/bin"}
JENKINS_WAR_PATH=${JENKINS_WAR_PATH:-"/$USERDIR_/bin"}
JENKINS_WAR=${JENKINS_WAR:-"$JENKINS_WAR_PATH/jenkins.war"}
JENKINS_URL="https://get.jenkins.io/war-stable/latest/jenkins.war"

# Temporary tarball to ADD into the container
TAR_BALL=temp_tarball.tgz

TOCLEAN="$TAR_BALL jenkins.war "
#
# ---- Jenkins tree ----
#
# Jenkins itself (will copy into image later)
#$DRYRUN wget -o /dev/null --show-progress "$JENKINS_URL"
#
# ---- end Jenkins tree ----

# Pre build of some directory trees
#
# ---- SSH configuration ----
#
if [ ! -d "$USERDIR_" ]; then
   mkdir -p "$USERDIR_" 
fi
mkdir -p "$USERDIR_"/.ssh
ssh-keygen -f "$USERDIR_/.ssh/$KEY_FILE" -N ''
cp "$USERDIR_/.ssh/$KEY_FILE".pub "$USERDIR_"/.ssh/authorized_keys
# ssh config to use widely
cat > "$USERDIR_"/.ssh/config << EOF
Host *
IdentityFile ~/.ssh/$KEY_FILE
User $USR_
StrictHostKeyChecking no
EOF
#
# ---- end SSH ----

# 
# ---- other user configs ----
echo export PATH=$BASEPATH > "$USERDIR_"/.profile
echo export PATH=$BASEPATH > "$USERDIR_"/.bashrc
# ---- end configs ----

# 
# ---- Python wrapper built in bash ----
#
# This will be used by jenkins to find out the python host
PYHOST_FILE=${PYHOST_FILE:-"python.host"}
PYWRAP_FILE=${PYWRAP_FILE:-"python_wrap.sh"}
# python commands to be linked to $PYWRAP_FILE
PYFILES="python python3 pytest py.test pyinstaller"

if [ ! -d $LOCALBIN ]; then
   mkdir -p $LOCALBIN
fi
cat > $LOCALBIN/$PYWRAP_FILE << EOF
#!/bin/sh

if [ -f ~/$PYHOST_FILE ]; then
   PYHOST=\$(head -1 ~/$PYHOST_FILE)
else
   PYHOST=python
fi

CWD="\`pwd\`"		# Should run in the same directory
COMMAND=\`basename \$0\`	# Just want the command name itself

if [ "\$COMMAND" = "python" ] ; then
   # If need python2, remove this IF but install python2 in the python container
   ssh -o StrictHostKeyChecking=no \$PYHOST "(cd \"\$CWD\" ; python3 "\$@" )"
else
   ssh -o StrictHostKeyChecking=no \$PYHOST "(cd \"\$CWD\" ; \$COMMAND "\$@" )"
fi

EOF

# Don't forget to make it executable
chmod 755 $LOCALBIN/$PYWRAP_FILE

( cd $LOCALBIN 
for pyfile in $PYFILES
do
   ln -sf $PYWRAP_FILE $pyfile
done )
#
# ---- end python wrap ----

# 
# ---- Node.js wrapper commands in bash ----
#
# This will be used by jenkins to find out the node.js host
NODE_HOST_FILE=${NODE_HOST_FILE:-"nodejs.host"}
NODE_WRAP_FILE=${NODE_WRAP_FILE:-"nodejs_wrap.sh"}
# python commands to be linked to $PYWRAP_FILE
NODE_FILES="node npm "

if [ ! -d $LOCALBIN ]; then
   mkdir -p $LOCALBIN
fi
cat > $LOCALBIN/$NODE_WRAP_FILE << EOF
#!/bin/sh

if [ -f ~/$NODE_HOST_FILE ]; then
   NODE_HOST=\$(head -1 ~/$NODE_HOST_FILE)
else
   NODE_HOST=node
fi

CWD="\`pwd\`"		# Should run in the same directory
COMMAND=\`basename \$0\`	# Just want the command name itself

ssh -o StrictHostKeyChecking=no \$NODE_HOST "(cd \"\$CWD\" ; \$COMMAND "\$@" )"

EOF

# Don't forget to make it executable
chmod 755 $LOCALBIN/$NODE_WRAP_FILE

( cd $LOCALBIN 
for nodefile in $NODE_FILES
do
   ln -sf $NODE_WRAP_FILE $nodefile
done )
#
# ---- end Node.js wrap ----

# 
# ---- PHP wrapper commands in bash ----
#
# This will be used by jenkins to find out the PHP host
PHP_HOST_FILE=${PHP_HOST_FILE:-"php.host"}
PHP_WRAP_FILE=${PHP_WRAP_FILE:-"php_wrap.sh"}
# PHP commands to be linked to $PHP_WRAP_FILE
PHP_FILES="php phpdismod phpenmod phpquery "

if [ ! -d $LOCALBIN ]; then
   mkdir -p $LOCALBIN
fi
cat > $LOCALBIN/$PHP_WRAP_FILE << EOF
#!/bin/sh

if [ -f ~/$PHP_HOST_FILE ]; then
   PHP_HOST=\$(head -1 ~/$PHP_HOST_FILE)
else
   PHP_HOST=php
fi

CWD="\`pwd\`"		# Should run in the same directory
COMMAND=\`basename \$0\`	# Just want the command name itself

ssh -o StrictHostKeyChecking=no \$PHP_HOST "(cd \"\$CWD\" ; \$COMMAND "\$@" )"

EOF

# Don't forget to make it executable
chmod 755 $LOCALBIN/$PHP_WRAP_FILE

( cd $LOCALBIN 
for phpfile in $PHP_FILES
do
   ln -sf $PHP_WRAP_FILE $phpfile
done )
#
# ---- end PHP wrap ----

#
# ---- The jenkins CMD to start container ----
cat > $LOCALBIN/jenkins << EOF
#!/bin/bash

PATH=$BASEPATH
export PATH
umask 022
JENKINS_WAR="$JENKINS_WAR"
URL="$JENKINS_URL"
JPORT=\${DOCKER_JENKINS_PORT:-8080}

# check for WAR. If not found, donwload and try.
if [ -f "\$JENKINS_WAR" ]; then
   _FOUND_JENKINS=1
else
   mkdir -p "\$(dirname \$JENKINS_WAR)"
   # Download
   if [ "\$(which curl)" != "" ]; then
      echo "\$(date): Downloading \$URL to \$JENKINS_WAR with curl"
      curl --silent --location --output \$JENKINS_WAR \$URL && _FOUND_JENKINS=1
      echo "\$(date): Downloaded."
   elif [ "\$(which wget)" != "" ]; then
      echo "\$(date): Downloading \$URL to \$JENKINS_WAR with wget"
      wget -q -O \$JENKINS_WAR \$URL && _FOUND_JENKINS=1
      echo "\$(date): Downloaded."
   fi   
fi

if [ "\$_FOUND_JENKINS" = "1" ]; then
   if [ \$(whoami) = "root" ]; then
      su -l jenkins -c "java -jar \$JENKINS_WAR --httpPort=\$JPORT" &
      /usr/sbin/sshd -D
   else
      java -jar \$JENKINS_WAR --httpPort=\$JPORT
   fi
else
   echo "Jenkins not found and could not be downloaded. Aborting."
   exit 2
fi
EOF

chmod 755 $LOCALBIN/jenkins
#
# ---- end jenkins CMD ----

# Before packing, ensure proper settings to ensure ssh running
$SUDO chown -R $UID_:$GID_ "$USERDIR_"
$SUDO chmod -R go-rwx "$USERDIR_"
$SUDO chown $UID_:$GID_ "$USERDIR_"/.profile
$SUDO chown $UID_:$GID_ "$USERDIR_"/.bashrc
# Make tar ball that will contain usr and var trees
[ -d usr ] && DIRLIST="$DIRLIST usr"
[ -d etc ] && DIRLIST="$DIRLIST etc"
[ -d var ] && DIRLIST="$DIRLIST var"
# may add USERDIR_ when it is not inside var
#[ -d $USERDIR_ ] && DIRLIST="$DIRLIST $USERDIR_"
$SUDO tar -czf ${TAR_BALL} $DIRLIST


# 
# ---- Finally Dockerfile ----
#
OLD_IFS="$IFS"
IFS=""
_DOCKERBODY="FROM $FROMIMG

LABEL Comment=\"$COMMENT\"

ADD $TAR_BALL /

# Check https://docs.docker.com/engine/reference/builder/#add to see the useless behavior of ADD --chmod when donwloading from URL
# BUT works on arm64 platforms...

RUN groupadd -g $GID_ $GRP_ && \\
    useradd -M -u $UID_ -g $GRP_ -d /$USERDIR_ $USR_ && \\
    mkdir -p $JENKINS_WAR_PATH && \\
    chmod 755 $JENKINS_WAR_PATH && chown $UID_:$GID_ $JENKINS_WAR_PATH

EXPOSE 8080

VOLUME  [\"/$USERDIR_\"]

CMD [\"/$LOCALBIN/jenkins\"]
"
IFS="$OLD_IFS"
#EOF
